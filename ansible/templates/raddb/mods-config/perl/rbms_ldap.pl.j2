use strict;
use vars qw(%RAD_REQUEST %RAD_REPLY %RAD_CHECK);
use Net::LDAP;
use Data::Dumper;

#
# (c)2019 by Pavel Burtovoy <pavel.burtovoy@burtovoy.su>
#

# This is hash wich hold original request from radius
#my %RAD_REQUEST;
# In this hash you add values that will be returned to NAS.
#my %RAD_REPLY;
#This is for check items
#my %RAD_CHECK;

#
# This the remapping of return values
#
	use constant    RLM_MODULE_REJECT=>    0;#  /* immediately reject the request */
	use constant	RLM_MODULE_FAIL=>      1;#  /* module failed, don't reply */
	use constant	RLM_MODULE_OK=>        2;#  /* the module is OK, continue */
	use constant	RLM_MODULE_HANDLED=>   3;#  /* the module handled the request, so stop. */
	use constant	RLM_MODULE_INVALID=>   4;#  /* the module considers the request invalid. */
	use constant	RLM_MODULE_USERLOCK=>  5;#  /* reject the request (user is locked out) */
	use constant	RLM_MODULE_NOTFOUND=>  6;#  /* user not found */
	use constant	RLM_MODULE_NOOP=>      7;#  /* module succeeded without doing anything */
	use constant	RLM_MODULE_UPDATED=>   8;#  /* OK (pairs modified) */
	use constant	RLM_MODULE_NUMCODES=>  9;#  /* How many return codes there are */

sub authorize {
    return RLM_MODULE_OK;
}

sub authenticate {
    &log_request_attributes;

    my $ldap = Net::LDAP->new("127.0.0.1");

    $ldap->bind( version => 3 );

    my $base = sprintf("cn=%s,ou=route,ou=%s,ou=apn,{{ ldap_domain }}",$RAD_REQUEST{'Framed-IP-Address'},$RAD_REQUEST{'Called-Station-Id'});

    my $result = $ldap->search (
	base    => $base,
	scope   => "sub",
	filter  => "radiusFramedRoute=*",
	attrs   => ['radiusFramedRoute']
    );

    if ( $result->{resultCode} == 0 ){
	
	$RAD_REPLY{'Framed-Route'} = \@{$result->as_struct->{$base}->{radiusframedroute}};
    }

    $ldap->unbind;

    return RLM_MODULE_OK;

#    if ($RAD_REQUEST{'User-Name'} =~ /^baduser/i) {
#	# Reject user and tell him why
#	$RAD_REPLY{'Reply-Message'} = "Denied access by rlm_perl function";
#	return RLM_MODULE_REJECT;
#    } else {
#	# Accept user and set some attribute
#	$RAD_REPLY{'Framed-Route'} = "10.0.0.0/24";
##	$RAD_REPLY{'Framed-Route'} = $base;
#	return RLM_MODULE_OK;
#    }
}

sub preacct {
    return RLM_MODULE_OK;
}

sub accounting {
    return RLM_MODULE_OK;
}

sub checksimul {
    return RLM_MODULE_OK;
}

sub pre_proxy {
    return RLM_MODULE_OK;
}

sub post_proxy {
    return RLM_MODULE_OK;
}

sub post_auth {
    return RLM_MODULE_OK;
}

sub xlat {
    # Function to handle xlat
}

sub detach {
    &radiusd::radlog(0,"rlm_perl::Detaching. Reloading. Done.");
}

#
# Some functions that can be called from other functions
#

sub test_call {
	# Some code goes here
}

sub log_request_attributes {
	# This shouldn't be done in production environments!
	# This is only meant for debugging!
	for (keys %RAD_REQUEST) {
		&radiusd::radlog(1, "RAD_REQUEST: $_ = $RAD_REQUEST{$_}");
	}
}
